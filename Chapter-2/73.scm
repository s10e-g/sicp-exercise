;;; ex-2.73
(load "../Chapter-3/common-3.scm")
(load "common.scm")

(define (deriv expr var)
  (cond ((number? expr) 0)
        ((variable? expr) (if (same-variable? expr var) 1 0))
        (else ((get 'deriv (operator expr)) (operands expr)
                                            var))))

(define (operator expr) (car expr))

(define (operands expr) (cdr expr))

;; b)
(define (install-sum-package)
  (define (addend s) (car s))
  (define (augend s) (cadr s))
  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (attach-tag '+ (list a1 a2)))))
  (put 'addend '+ addend)
  (put 'augend '+ augend)
  (put 'make-sum '+ make-sum)
  (put 'deriv '+
       (lambda (expr var)
         (make-sum (deriv (addend expr) var)
                   (deriv (augend expr) var))))
  'ok)

(define (install-product-package)
  (install-sum-package)
  (define (multiplier p) (car p))
  (define (multiplicand p) (cadr p))
  (define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else (attach-tag '* (list m1 m2)))))
  (put 'multiplier '* multiplier)
  (put 'multiplicand '* multiplicand)
  (put 'make-product '* make-product)
  (put 'deriv '*
       (lambda (expr var)
         ((get 'make-sum '+) (make-product (deriv (multiplier expr) var)
                                           (multiplicand expr))
                             (make-product (multiplier expr)
                                           (deriv (multiplicand expr) var)))))
  'ok)

;; c)
(define (install-exponentiation-package)
  (install-product-package)
  (define (base x) (car x))
  (define (exponent x) (cadr x))
  (define (make-exponentiation b e)
    (cond ((= e 0) 1)
          ((= e 1) b)
          (else (attach-tag '** (list b e)))))
  (put 'base '** base)
  (put 'exponent '** exponent)
  (put 'make-exponentiation '** make-exponentiation)
  (put 'deriv '**
       (lambda (expr var)
         ((get 'make-product '*) (exponent expr)
                                 (make-exponentiation (base expr)
                                                      (- (exponent expr) 1)))))
  'ok)
